<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword template="false" xmlns:ct="http://www.abisource.com/changetracking.dtd" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xid-max="77" xmlns:dc="http://purl.org/dc/elements/1.1/" styles="unlocked" fileformat="1.0" xmlns:svg="http://www.w3.org/2000/svg" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" version="0.99.2" xml:space="preserve" props="dom-dir:ltr; document-footnote-restart-section:0; document-endnote-type:numeric; document-endnote-place-enddoc:1; document-endnote-initial:1; lang:en-US; document-endnote-restart-section:0; document-footnote-restart-page:0; document-footnote-type:numeric; document-footnote-initial:1; document-endnote-place-endsection:0">
<!-- ======================================================================== -->
<!-- This file is an AbiWord document.                                        -->
<!-- AbiWord is a free, Open Source word processor.                           -->
<!-- More information about AbiWord is available at http://www.abisource.com/ -->
<!-- You should not edit this file by hand.                                   -->
<!-- ======================================================================== -->

<metadata>
<m key="abiword.date_last_changed">Mon Mar  7 21:33:52 2016
</m>
<m key="abiword.generator">AbiWord</m>
<m key="dc.creator">Junu Jeong</m>
<m key="dc.date">Mon Mar  7 21:15:06 2016
</m>
<m key="dc.format">application/x-abiword</m>
</metadata>
<rdf>
</rdf>
<history version="26" edit-time="3538" last-saved="1457354032" uid="9750a710-e458-11e5-857b-d7f8dc6f1c0b">
<version id="9" started="1457352906" uid="3d6c001c-e45f-11e5-857b-d7f8dc6f1c0b" auto="0" top-xid="32"/>
<version id="26" started="1457353461" uid="d9ed532c-e460-11e5-81b0-ba4897e19e61" auto="0" top-xid="51"/>
</history>
<styles>
<s type="P" name="Normal" followedby="Current Settings" props="font-family:Times New Roman; margin-top:0pt; color:000000; margin-left:0pt; bgcolor:transparent; widows:2; font-style:normal; text-indent:0in; text-position:normal; margin-bottom:0pt; font-weight:normal; line-height:1.0; text-align:left; font-variant:normal; text-decoration:none; margin-right:0pt; font-size:12pt; font-stretch:normal"/>
</styles>
<pagesize pagetype="Letter" orientation="portrait" width="8.500000" height="11.000000" units="in" page-scale="1.000000"/>
<section xid="8" props="page-margin-footer:0.5in; page-margin-header:0.5in">
<p style="Normal" xid="9">BridgeFunction.py<c></c></p>
<p style="Normal" xid="1">Frame<c></c></p>
<p style="Normal" xid="2"><c></c><c></c></p>
<p style="Normal" xid="10">import<c></c></p>
<p style="Normal" xid="30">	BridgeParameters<c></c></p>
<p style="Normal" xid="12"><c></c><c></c></p>
<p style="Normal" xid="13">#Functions<c></c></p>
<p style="Normal" xid="14">#%%Get turn value<c></c></p>
<p style="Normal" xid="3">def GetGameTurn(turn, gturn):<c></c></p>
<p style="Normal" xid="15">	if turn == gturn:<c></c></p>
<p style="Normal" xid="22">		return True<c></c></p>
<p style="Normal" xid="23">	else:<c></c></p>
<p style="Normal" xid="24">		return False<c></c></p>
<p style="Normal" xid="25"><c></c><c></c></p>
<p style="Normal" xid="26">#%%Get Mouse position index of board<c></c></p>
<p style="Normal" xid="27">def GetMouseindex(mouse):<c></c></p>
<p style="Normal" xid="29">	return (mouse[0] - screenWidth/2)/60+4, (mouse[1] - screenHeight/2)/60+4<c></c></p>
<p style="Normal" xid="35"><c></c><c></c></p>
<p style="Normal" xid="36"><c></c>#%%Check Victory Condition</p>
<p style="Normal" xid="37">def IsConnected(map,index1,index2):<c></c></p>
<p style="Normal" xid="39">	if map[index1[0],index1[1]]^map[index2[0],index2[1]] &gt; 0 and map[index1[0],index1[1]] != 0 and map[index2[0],index2[1]] != 0:<c></c></p>
<p style="Normal" xid="41">		return True<c></c></p>
<p style="Normal" xid="42">	else:<c></c></p>
<p style="Normal" xid="43">		return False<c></c></p>
<p style="Normal" xid="40"><c></c><c></c></p>
<p style="Normal" xid="33">def IsEnd(map, index):<c></c></p>
<p style="Normal" xid="34">	map_len = len(map)<c></c></p>
<p style="Normal" xid="46">	for seed in range(map_len):</p>
<p style="Normal" xid="47">		if seed == map_len - 1:</p>
<p style="Normal" xid="48">			return True</p>
<p style="Normal" xid="49">		elif not IsConnected(seed,index[1]-1,seed+1,index[1]-1):</p>
<p style="Normal" xid="50">			break</p>
<p style="Normal" xid="51">	for seed in range(map_len):</p>
<p style="Normal" xid="52">		if seed == map_len - 1:</p>
<p style="Normal" xid="53">			return True</p>
<p style="Normal" xid="54">		elif not IsConnected(index[0]-1,seed,index[0]-1,seed+1):</p>
<p style="Normal" xid="55">			break</p>
<p style="Normal" xid="56">	for seed in range(map_len-abs(index[0]-index[1])):</p>
<p style="Normal" xid="58">		if map_len - abs(index[0]-index[1]) &gt; 1:</p>
<p style="Normal" xid="59">			if seed == map_len - abs(index[0]-index[1])-1:</p>
<p style="Normal" xid="60">				return True</p>
<p style="Normal" xid="61">			elif index[0] &lt; index[1]:</p>
<p style="Normal" xid="62">				if not IsConnected(seed,-index[0]+index[1]+seed,seed+1,-index[0]+index[1]+seed+1):</p>
<p style="Normal" xid="64">					break</p>
<p style="Normal" xid="65">			elif index[0] &gt;= index[1]:</p>
<p style="Normal" xid="66">				if not IsConnected(index[0]-index[1]+seed,seed,index[0]-index[1]+seed+1,seed+1):</p>
<p style="Normal" xid="67">					break</p>
<p style="Normal" xid="68">	for seed in range(map_len-abs(map_len+1-index[0]-index[1])):</p>
<p style="Normal" xid="69">		if 2 &lt; index[0]+index[1] &lt; 2*map_len:</p>
<p style="Normal" xid="70">			if seed == map_len-abs(map_len+1-index[0]-index[1])-1:</p>
<p style="Normal" xid="71">				return True</p>
<p style="Normal" xid="72">			elif index[0] &gt; map_len+1-index[1]:</p>
<p style="Normal" xid="73">				if not IsConnected(index[0]+index[1]-map_len-1+seed,map_len-1-seed,index[0]+index[1]-map_len+seed,map_len-2-seed):</p>
<p style="Normal" xid="74">					break</p>
<p style="Normal" xid="75">			elif index[0] &lt;= map_len+1-index[1]:</p>
<p style="Normal" xid="76">				if not IsConnected(seed,index[0]+index[1]-2-seed,seed+1,index[0]+index[1]-3-seed):</p>
<p style="Normal" xid="77">					break</p>
</section>
</abiword>
